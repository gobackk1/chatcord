rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      function isAuthenticated() {
        return request.auth != null;
      }
      // function isUserAuthenticated(userId) {
      //   return request.auth != null && userId == request.auth.uid;
      // }

      match /rooms/{roomId} {
        function isValidRoom(room) {
          return room.size() == 3
            && 'name' in room && room.name is string
            && room.name.size() >= 1 && room.name.size() <= 20
            && 'displayName' in room && room.displayName is string
            && room.displayName.size() >= 1 && room.displayName.size() <= 20
            && 'members' in room && room.members is map
        }
        function isRoomMember() {
          return request.auth.uid in resource.data.members
        }
        allow read: if isAuthenticated() && isRoomMember();
        // TODO: ログインかつ emailVerified
        allow create: if isAuthenticated() && isValidRoom(request.resource.data);
        // allow update: if isUserAuthenticated(userId) && isValidMemo(request.resource.data);
        // allow delete: if isUserAuthenticated(userId);

        match /channels/{channelId} {
          function isValidChannel(channel) {
            return channel.size() == 2
              && 'name' in channel && channel.name is string
              && channel.name.size() >=1 && channel.name.size() <=20
              && 'topic' in channel && channel.topic is string
              && channel.topic.size() >=0 && channel.topic.size() <=200
          }
          function isParentRoomMember() {
            return request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.members;
          }
          allow read: if isAuthenticated() && isParentRoomMember();
          allow create: if isAuthenticated() && isValidChannel(request.resource.data) && !isParentRoomMember();
        }
      }
    }
  }
}